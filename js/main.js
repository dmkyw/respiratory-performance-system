/**
 * Service WorkerÊ≥®ÂÜå
 * Ê≥®ÂÜåPWAÊúçÂä°Â∑•‰ΩúËÄÖ‰ª•ÊîØÊåÅÁ¶ªÁ∫øÂäüËÉΩ
 */
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('./sw.js')
            .then((registration) => {
                console.log('Service WorkerÊ≥®ÂÜåÊàêÂäü:', registration.scope);
                
                // Ê£ÄÊü•Êõ¥Êñ∞
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            // ÊúâÊñ∞ÁâàÊú¨ÂèØÁî®
                            console.log('ÂèëÁé∞Êñ∞ÁâàÊú¨ÔºåÂáÜÂ§áÊõ¥Êñ∞');
                            if (confirm('ÂèëÁé∞Êñ∞ÁâàÊú¨ÔºåÊòØÂê¶Á´ãÂç≥Êõ¥Êñ∞Ôºü')) {
                                window.location.reload();
                            }
                        }
                    });
                });
            })
            .catch((error) => {
                console.log('Service WorkerÊ≥®ÂÜåÂ§±Ë¥•:', error);
            });
    });
}

/**
 * ‰∏ªÈ°µÈù¢ÊéßÂà∂Âô®
 * Ë¥üË¥£Êï∞ÊçÆÂΩïÂÖ•„ÄÅÂåªÁîüÁÆ°ÁêÜÂíåÁª©ÊïàËÆ°ÁÆó
 */
class MainPageController {
    constructor() {
        this.storageManager = new StorageManager();
        this.calculator = new PerformanceCalculator();
        this.doctors = [];
        this.workData = {};
        this.currentMonth = null;
        this.totalBonus = 0;
        
        this.init();
    }

    /**
     * ÂàùÂßãÂåñÈ°µÈù¢
     */
    async init() {
        console.log('ÂºÄÂßãÂàùÂßãÂåñÈ°µÈù¢...');
        
        // È¶ñÂÖàÊ∏ÖÁêÜÊó†ÊïàÂåªÁîüÊï∞ÊçÆ
        await this.cleanupInvalidDoctors();
        
        await this.loadDoctors();
        this.setupEventListeners();
        
        // ÊÅ¢Â§çÊúà‰ªΩÂíåÊÄªÂ•ñÈáëËÆæÁΩÆ
        this.restoreSettings();
        
        this.renderCombinedTable();
        this.updateDataSummary();
        
        console.log('È°µÈù¢ÂàùÂßãÂåñÂÆåÊàê');
    }

    /**
     * ÊÅ¢Â§çÊúà‰ªΩÂíåÊÄªÂ•ñÈáëËÆæÁΩÆ
     */
    restoreSettings() {
        // ‰ªélocalStorageÊÅ¢Â§çÊúà‰ªΩËÆæÁΩÆ
        const savedMonth = localStorage.getItem('performance_system_current_month');
        const monthInput = document.getElementById('currentMonth');
        
        if (savedMonth) {
            this.currentMonth = savedMonth;
            monthInput.value = savedMonth;
        } else {
            // ËÆæÁΩÆÈªòËÆ§Êúà‰ªΩ‰∏∫ÂΩìÂâçÊúà‰ªΩ
            const currentDate = new Date();
            const defaultMonth = currentDate.toISOString().slice(0, 7); // YYYY-MMÊ†ºÂºè
            this.currentMonth = defaultMonth;
            monthInput.value = defaultMonth;
            localStorage.setItem('performance_system_current_month', defaultMonth);
        }
        
        // ‰ªélocalStorageÊÅ¢Â§çÊÄªÂ•ñÈáëËÆæÁΩÆ
        const savedBonus = localStorage.getItem('performance_system_total_bonus');
        const bonusInput = document.getElementById('totalBonus');
        
        if (savedBonus) {
            this.totalBonus = parseFloat(savedBonus);
            bonusInput.value = savedBonus;
        } else {
            // ËÆæÁΩÆÈªòËÆ§ÊÄªÂ•ñÈáë
            const defaultBonus = 50000;
            this.totalBonus = defaultBonus;
            bonusInput.value = defaultBonus;
            localStorage.setItem('performance_system_total_bonus', defaultBonus.toString());
        }
        
        console.log('ËÆæÁΩÆÊÅ¢Â§çÂÆåÊàê - Êúà‰ªΩ:', this.currentMonth, 'ÊÄªÂ•ñÈáë:', this.totalBonus);
    }

    /**
     * Âä†ËΩΩÂåªÁîüÊï∞ÊçÆ
     */
    async loadDoctors() {
        this.doctors = await this.storageManager.getAllDoctors() || [];
        
        // Â¶ÇÊûúÊ≤°ÊúâÂåªÁîüÊï∞ÊçÆÔºåÂàõÂª∫ÈªòËÆ§Á§∫‰æãÊï∞ÊçÆ
        if (this.doctors.length === 0) {
            console.log('üîß [DEBUG] Ê≤°ÊúâÊâæÂà∞ÂåªÁîüÊï∞ÊçÆÔºåÂàõÂª∫ÈªòËÆ§Á§∫‰æãÊï∞ÊçÆ');
            await this.initializeDefaultDoctors();
        }
    }

    /**
     * ÂàùÂßãÂåñÈªòËÆ§ÂåªÁîüÊï∞ÊçÆ
     */
    async initializeDefaultDoctors() {
        console.log('üîß [DEBUG] ÂºÄÂßãÂàõÂª∫ÈªòËÆ§ÂåªÁîüÊï∞ÊçÆ');
        
        const defaultDoctors = [
            new Doctor(null, 'Âº†ÂåªÁîü', '‰∏ªÊ≤ªÂåªÂ∏à', 1.2, 5, true),
            new Doctor(null, 'ÊùéÂåªÁîü', 'ÂâØ‰∏ª‰ªªÂåªÂ∏à', 1.5, 8, true),
            new Doctor(null, 'ÁéãÂåªÁîü', '‰ΩèÈô¢ÂåªÂ∏à', 1.0, 2, true),
            new Doctor(null, 'ÂàòÂåªÁîü', '‰∏ª‰ªªÂåªÂ∏à', 1.8, 12, true),
            new Doctor(null, 'ÈôàÂåªÁîü', '‰ΩèÈô¢ÂåªÂ∏à', 1.0, 1, false)
        ];
        
        console.log('üîß [DEBUG] ÂàõÂª∫ÁöÑÈªòËÆ§ÂåªÁîüÊï∞ÊçÆ:', defaultDoctors);
        
        // ‰øùÂ≠òÂà∞Â≠òÂÇ®
        try {
            for (const doctor of defaultDoctors) {
                await this.storageManager.addDoctor(doctor);
                this.doctors.push(doctor);
            }
            
            console.log('üîß [DEBUG] ÈªòËÆ§ÂåªÁîüÊï∞ÊçÆ‰øùÂ≠òÊàêÂäüÔºåÂΩìÂâçÂåªÁîüÊï∞Èáè:', this.doctors.length);
            
            // ÂàõÂª∫ÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆ
            await this.initializeDefaultWorkData();
            
            // Âà∑Êñ∞È°µÈù¢ÊòæÁ§∫
            this.renderCombinedTable();
            this.updateDataSummary();
            
        } catch (error) {
            console.error('üîß [DEBUG] ‰øùÂ≠òÈªòËÆ§ÂåªÁîüÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * ÂàùÂßãÂåñÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆ
     */
    async initializeDefaultWorkData() {
        console.log('üîß [DEBUG] ÂºÄÂßãÂàõÂª∫ÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆ');
        
        const defaultWorkData = {
            [this.doctors[0].id]: { attendanceDays: 22, dischargeCount: 15, bedDays: 180, medicalRevenue: 50000, rewardPenalty: 0 },
            [this.doctors[1].id]: { attendanceDays: 20, dischargeCount: 20, bedDays: 220, medicalRevenue: 80000, rewardPenalty: 0 },
            [this.doctors[2].id]: { attendanceDays: 25, dischargeCount: 12, bedDays: 150, medicalRevenue: 35000, rewardPenalty: 0 },
            [this.doctors[3].id]: { attendanceDays: 18, dischargeCount: 25, bedDays: 280, medicalRevenue: 120000, rewardPenalty: 0 },
            [this.doctors[4].id]: { attendanceDays: 24, dischargeCount: 8, bedDays: 100, medicalRevenue: 25000, rewardPenalty: 0 }
        };
        
        console.log('üîß [DEBUG] ÂàõÂª∫ÁöÑÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆ:', defaultWorkData);
        
        // ‰øùÂ≠òÂ∑•‰ΩúÊï∞ÊçÆÂà∞Â≠òÂÇ®
        const currentKey = this.currentMonth; // Â∑≤ÁªèÊòØYYYY-MMÊ†ºÂºè
        try {
            await this.storageManager.saveCurrentWorkData(currentKey, defaultWorkData);
            console.log('üîß [DEBUG] ÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆ‰øùÂ≠òÊàêÂäü');
        } catch (error) {
            console.error('üîß [DEBUG] ‰øùÂ≠òÈªòËÆ§Â∑•‰ΩúÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    setupEventListeners() {
        // Ê∑ªÂä†ÂåªÁîüÊåâÈíÆ
        document.getElementById('addDoctorBtn').addEventListener('click', () => {
            this.showDoctorModal();
        });

        // ‰øùÂ≠òÂåªÁîüÊåâÈíÆ
        document.getElementById('saveDoctorBtn').addEventListener('click', async () => {
            await this.saveDoctor();
        });

        // Êúà‰ªΩËÆæÁΩÆÊåâÈíÆ
        document.getElementById('setMonthBtn').addEventListener('click', () => {
            this.setCurrentMonth();
        });

        // ÊÄªÂ•ñÈáëËæìÂÖ•
        document.getElementById('totalBonus').addEventListener('input', (e) => {
            this.updateTotalBonus(e.target.value);
        });

        // ËÆ°ÁÆóÊåâÈíÆ
        document.getElementById('calculateBtn').addEventListener('click', () => {
            this.calculatePerformance();
        });

        // ‰øùÂ≠òÊï∞ÊçÆÊåâÈíÆ
        document.getElementById('saveDataBtn').addEventListener('click', async () => {
            await this.saveCurrentData();
        });

        // Âä†ËΩΩÂéÜÂè≤ÊåâÈíÆ
        document.getElementById('loadHistoryBtn').addEventListener('click', () => {
            this.showHistoryModal();
        });

        // È¢ÑËßàÊï∞ÊçÆÊåâÈíÆ
        document.getElementById('previewDataBtn').addEventListener('click', () => {
            this.previewData();
        });

        // Ê∏ÖÁêÜÊó†ÊïàÊï∞ÊçÆÊåâÈíÆ
        const cleanupBtn = document.getElementById('cleanupInvalidBtn');
        if (cleanupBtn) {
            cleanupBtn.addEventListener('click', async () => {
                await this.cleanupInvalidDoctors();
            });
        }

        // ËÅåÁß∞ÈÄâÊã©ÂèòÂåñ
        document.getElementById('doctorTitle').addEventListener('change', (e) => {
            this.updateTitleCoefficient(e.target.value);
        });
    }

    /**
     * Ê∑ªÂä†Êñ∞ÂåªÁîü
     */
    addNewDoctor() {
        this.showDoctorModal();
    }

    /**
     * ÊòæÁ§∫ÂåªÁîüÊ∑ªÂä†/ÁºñËæëÊ®°ÊÄÅÊ°Ü
     */
    showDoctorModal(doctorId = null) {
        const modal = new bootstrap.Modal(document.getElementById('doctorModal'));
        const form = document.getElementById('doctorForm');
        const title = document.getElementById('doctorModalTitle');
        const deleteBtn = document.getElementById('deleteDoctorBtn');
        
        // ÈáçÁΩÆË°®Âçï
        form.reset();
        
        if (doctorId) {
            // ÁºñËæëÊ®°Âºè
            const doctor = this.doctors.find(d => d.id === doctorId);
            if (doctor) {
                title.textContent = 'ÁºñËæëÂåªÁîü‰ø°ÊÅØ';
                document.getElementById('doctorId').value = doctor.id;
                document.getElementById('doctorName').value = doctor.name;
                document.getElementById('doctorTitle').value = doctor.title;
                document.getElementById('titleCoefficient').value = doctor.titleCoefficient;
                
                // ÊòæÁ§∫Âà†Èô§ÊåâÈíÆ
                deleteBtn.style.display = 'inline-block';
                deleteBtn.onclick = async () => await this.confirmDeleteDoctor(doctorId);
            }
        } else {
            // Ê∑ªÂä†Ê®°Âºè
            title.textContent = 'Ê∑ªÂä†ÂåªÁîü';
            document.getElementById('doctorId').value = '';
            
            // ÈöêËóèÂà†Èô§ÊåâÈíÆ
            deleteBtn.style.display = 'none';
        }
        
        modal.show();
    }

    /**
     * ‰øùÂ≠òÂåªÁîü‰ø°ÊÅØ
     */
    async saveDoctor() {
        const form = document.getElementById('doctorForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const doctorId = document.getElementById('doctorId').value;
        const name = document.getElementById('doctorName').value.trim();
        const title = document.getElementById('doctorTitle').value;
        const titleCoefficient = parseFloat(document.getElementById('titleCoefficient').value);

        // È™åËØÅÂåªÁîüÊï∞ÊçÆ
        const doctorData = { name, title, titleCoefficient };
        const validation = this.validateDoctorData(doctorData);
        
        if (!validation.valid) {
            this.showMessage('Êï∞ÊçÆÈ™åËØÅÂ§±Ë¥•Ôºö' + validation.message, 'danger');
            return;
        }

        try {
            if (doctorId) {
                // Êõ¥Êñ∞Áé∞ÊúâÂåªÁîü
                const doctor = this.doctors.find(d => d.id === doctorId);
                if (doctor) {
                    doctor.name = name;
                    doctor.title = title;
                    doctor.titleCoefficient = titleCoefficient;
                    // ‰øÆÂ§çË∞ÉÁî®ÊñπÂºèÔºö‰º†ÈÄídoctorIdÂíåupdateData
                    await this.storageManager.updateDoctor(doctorId, {
                        name: name,
                        title: title,
                        titleCoefficient: titleCoefficient
                    });
                }
            } else {
                // Ê∑ªÂä†Êñ∞ÂåªÁîü
                const newDoctor = new Doctor(
                    null, // ID will be auto-generated
                    name,
                    title,
                    titleCoefficient,
                    0, // workYears
                    true, // isCertified
                    0 // baseSalary
                );
                
                await this.storageManager.addDoctor(newDoctor);
                this.doctors.push(newDoctor);
            }

            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            const modal = bootstrap.Modal.getInstance(document.getElementById('doctorModal'));
            modal.hide();

            // ÈáçÊñ∞Ê∏≤ÊüìË°®Ê†º
            this.renderCombinedTable();
            this.updateDataSummary();
            
            this.showMessage('ÂåªÁîü‰ø°ÊÅØ‰øùÂ≠òÊàêÂäü', 'success');
            
        } catch (error) {
            console.error('‰øùÂ≠òÂåªÁîü‰ø°ÊÅØÂ§±Ë¥•:', error);
            this.showMessage('‰øùÂ≠òÂ§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }

    /**
     * Êõ¥Êñ∞ËÅåÁß∞Á≥ªÊï∞
     */
    updateTitleCoefficient(title) {
        const coefficientMap = {
            '‰ΩèÈô¢ÂåªÂ∏à': 1.0,
            '‰∏ªÊ≤ªÂåªÂ∏à': 1.2,
            'ÂâØ‰∏ª‰ªªÂåªÂ∏à': 1.5,
            '‰∏ª‰ªªÂåªÂ∏à': 1.8
        };
        
        const coefficient = coefficientMap[title] || 1.0;
        document.getElementById('titleCoefficient').value = coefficient;
    }

    /**
     * Ê∏≤ÊüìÁªºÂêàË°®Ê†º
     */
    renderCombinedTable() {
        const tbody = document.getElementById('combinedTableBody');
        tbody.innerHTML = '';

        if (this.doctors.length === 0) {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td colspan="8" class="text-center text-muted py-4">
                    <i class="fas fa-user-plus fa-2x mb-2"></i><br>
                    ÊöÇÊó†ÂåªÁîü‰ø°ÊÅØÔºåËØ∑ÁÇπÂáª"Ê∑ªÂä†ÂåªÁîü"ÊåâÈíÆÊ∑ªÂä†
                </td>
            `;
            tbody.appendChild(row);
            return;
        }

        // Ëé∑ÂèñÂΩìÊúàÊÄªÂ§©Êï∞
        const currentMonth = document.getElementById('currentMonth')?.value || new Date().toISOString().slice(0, 7);
        const daysInMonth = this.getDaysInMonth(currentMonth);

        this.doctors.forEach(doctor => {
            const workData = this.workData[doctor.id] || {};
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>
                    <strong>${doctor.name} (${doctor.titleCoefficient})</strong><br>
                    <small class="text-muted">${doctor.title}</small>
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="attendanceDays" data-doctor-id="${doctor.id}" 
                           value="${workData.attendanceDays !== undefined ? workData.attendanceDays : daysInMonth}" 
                           min="0" max="31" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'attendanceDays', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="dischargeCount" data-doctor-id="${doctor.id}" 
                           value="${workData.dischargeCount || ''}" 
                           min="0" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'dischargeCount', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="medicalRevenue" data-doctor-id="${doctor.id}" 
                           value="${workData.medicalRevenue || ''}" 
                           min="0" step="0.01" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'medicalRevenue', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="bedDays" data-doctor-id="${doctor.id}" 
                           value="${workData.bedDays || ''}" 
                           min="0" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'bedDays', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="deduction" data-doctor-id="${doctor.id}" 
                           value="${workData.deduction !== undefined ? workData.deduction : 0}" 
                           min="0" step="0.01" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'deduction', this.value)">
                </td>
                <td>
                    <button class="btn btn-primary btn-sm w-100" 
                            onclick="mainController.showDoctorModal('${doctor.id}')">
                        <i class="fas fa-edit me-1"></i>ÁºñËæë
                    </button>
                </td>
            `;
            
            tbody.appendChild(row);
        });
    }

    /**
     * Êõ¥Êñ∞Â∑•‰ΩúÊï∞ÊçÆ
     */
    async updateWorkData(doctorId, field, value) {
        try {
            const numValue = parseFloat(value) || 0;
            
            if (!this.workData[doctorId]) {
                this.workData[doctorId] = {
                    doctorId: doctorId,
                    attendanceDays: 0,
                    dischargeCount: 0,
                    bedDays: undefined,
                    medicalRevenue: 0, // Êñ∞Â¢ûÂåªÁñóÊî∂ÂÖ•Â≠óÊÆµ
                    rewardPenalty: 0
                };
            }
            
            this.workData[doctorId][field] = numValue;
            
            // ‰øùÂ≠òÂà∞Â≠òÂÇ®
            await this.storageManager.saveCurrentWorkData(`workData_${doctorId}`, this.workData[doctorId]);
            
            // Êõ¥Êñ∞Êï∞ÊçÆÊ±áÊÄª
            this.updateDataSummary();
            
        } catch (error) {
            console.error('Êõ¥Êñ∞Â∑•‰ΩúÊï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('Êõ¥Êñ∞Êï∞ÊçÆÂ§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }



    /**
     * Á°ÆËÆ§Âà†Èô§ÂåªÁîüÔºà‰ªéÊ®°ÊÄÅÊ°Ü‰∏≠Ë∞ÉÁî®Ôºâ
     */
    async confirmDeleteDoctor(doctorId) {
        const doctor = this.doctors.find(d => d.id === doctorId);
        if (!doctor) {
            this.showMessage('Êú™ÊâæÂà∞Ë¶ÅÂà†Èô§ÁöÑÂåªÁîü‰ø°ÊÅØ', 'danger');
            return;
        }
        
        if (!confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§ÂåªÁîü "${doctor.name}" ÁöÑ‰ø°ÊÅØÂêóÔºü\n\nÂà†Èô§ÂêéÂ∞ÜÊó†Ê≥ïÊÅ¢Â§çÔºåÂåÖÊã¨ËØ•ÂåªÁîüÁöÑÊâÄÊúâÂ∑•‰ΩúÊï∞ÊçÆ„ÄÇ`)) {
            return;
        }
        
        await this.deleteDoctor(doctorId);
        
        // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
        const modal = bootstrap.Modal.getInstance(document.getElementById('doctorModal'));
        if (modal) {
            modal.hide();
        }
    }

    /**
     * Âà†Èô§ÂåªÁîü
     */
    async deleteDoctor(doctorId) {
        try {
            // ‰ªéÂ≠òÂÇ®‰∏≠Âà†Èô§
            await this.storageManager.deleteDoctor(doctorId);
            await this.storageManager.deleteWorkDataByDoctorId(doctorId);
            
            // ‰ªéÂÜÖÂ≠ò‰∏≠Âà†Èô§
            this.doctors = this.doctors.filter(d => d.id !== doctorId);
            delete this.workData[doctorId];
            
            // ÈáçÊñ∞Ê∏≤Êüì
            this.renderCombinedTable();
            this.updateDataSummary();
            
            this.showMessage('ÂåªÁîü‰ø°ÊÅØÂà†Èô§ÊàêÂäü', 'success');
            
        } catch (error) {
            console.error('Âà†Èô§ÂåªÁîüÂ§±Ë¥•:', error);
            this.showMessage('Âà†Èô§Â§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }

    /**
     * Ê£ÄÊü•Âπ∂Âà†Èô§Êó†ÂßìÂêçÁöÑÂåªÁîüÊï∞ÊçÆ
     */
    async cleanupInvalidDoctors() {
        console.log('ÂºÄÂßãÊ£ÄÊü•Êó†ÊïàÂåªÁîüÊï∞ÊçÆ...');
        
        // Áõ¥Êé•‰ªélocalStorageÊ£ÄÊü•ÂéüÂßãÊï∞ÊçÆ
        const rawDoctorsData = localStorage.getItem('performance_system_doctors');
        console.log('localStorage‰∏≠ÁöÑÂéüÂßãÂåªÁîüÊï∞ÊçÆ:', rawDoctorsData);
        
        if (!rawDoctorsData) {
            console.log('localStorage‰∏≠Ê≤°ÊúâÂåªÁîüÊï∞ÊçÆ');
            this.showMessage('Ê≤°ÊúâÊâæÂà∞ÂåªÁîüÊï∞ÊçÆ', 'info');
            return;
        }
        
        let doctorsArray;
        try {
            doctorsArray = JSON.parse(rawDoctorsData);
        } catch (e) {
            console.error('Ëß£ÊûêÂåªÁîüÊï∞ÊçÆÂ§±Ë¥•:', e);
            this.showMessage('ÂåªÁîüÊï∞ÊçÆÊ†ºÂºèÈîôËØØ', 'danger');
            return;
        }
        
        console.log('Ëß£ÊûêÂêéÁöÑÂåªÁîüÊï∞ÁªÑ:', doctorsArray);
        console.log('ÂåªÁîüÊï∞ÁªÑÈïøÂ∫¶:', doctorsArray.length);
        
        // ËØ¶ÁªÜÊ£ÄÊü•ÊØè‰∏™ÂåªÁîüËÆ∞ÂΩï
        doctorsArray.forEach((doctor, index) => {
            console.log(`ÂåªÁîü ${index}:`, {
                name: doctor.name,
                nameType: typeof doctor.name,
                nameLength: doctor.name ? doctor.name.length : 0,
                trimmedName: doctor.name ? doctor.name.trim() : '',
                id: doctor.id,
                title: doctor.title,
                fullDoctor: doctor
            });
        });
        
        // ÊâæÂá∫Êó†ÊïàÁöÑÂåªÁîüËÆ∞ÂΩï
        const validDoctors = [];
        const invalidDoctors = [];
        
        doctorsArray.forEach(doctor => {
            const name = doctor.name;
            const isInvalid = !name || 
                            name === null || 
                            name === undefined || 
                            (typeof name === 'string' && name.trim() === '') ||
                            name === 'undefined' ||
                            name === 'null';
            
            if (isInvalid) {
                invalidDoctors.push(doctor);
                console.log('ÂèëÁé∞Êó†ÊïàÂåªÁîü:', doctor);
            } else {
                validDoctors.push(doctor);
            }
        });
        
        console.log('ÊúâÊïàÂåªÁîüÊï∞Èáè:', validDoctors.length);
        console.log('Êó†ÊïàÂåªÁîüÊï∞Èáè:', invalidDoctors.length);
        console.log('Êó†ÊïàÂåªÁîüÂàóË°®:', invalidDoctors);
        
        if (invalidDoctors.length === 0) {
            this.showMessage('Êú™ÂèëÁé∞Êó†ÂßìÂêçÁöÑÂåªÁîüÊï∞ÊçÆ', 'info');
            return;
        }
        
        // Âà†Èô§Êó†ÊïàÂåªÁîüÁöÑÂ∑•‰ΩúÊï∞ÊçÆ
        for (const doctor of invalidDoctors) {
            if (doctor.id) {
                try {
                    await this.storageManager.deleteWorkDataByDoctorId(doctor.id);
                    console.log('Â∑≤Âà†Èô§Â∑•‰ΩúÊï∞ÊçÆ:', doctor.id);
                } catch (error) {
                    console.log('Âà†Èô§Â∑•‰ΩúÊï∞ÊçÆÊó∂Âá∫Èîô:', error.message);
                }
            }
        }
        
        // ‰øùÂ≠òÊ∏ÖÁêÜÂêéÁöÑÂåªÁîüÂàóË°®
        try {
            localStorage.setItem('performance_system_doctors', JSON.stringify(validDoctors));
            console.log('Â∑≤‰øùÂ≠òÊ∏ÖÁêÜÂêéÁöÑÂåªÁîüÂàóË°®');
            
            // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
            await this.loadDoctors();
            this.renderCombinedTable();
            this.updateDataSummary();
            
            this.showMessage(`Â∑≤Âà†Èô§ ${invalidDoctors.length} ‰∏™Êó†ÂßìÂêçÁöÑÂåªÁîüËÆ∞ÂΩï`, 'success');
            console.log('Êó†ÊïàÂåªÁîüÊï∞ÊçÆÊ∏ÖÁêÜÂÆåÊàê');
            
        } catch (error) {
             console.error('‰øùÂ≠òÊ∏ÖÁêÜÂêéÁöÑÊï∞ÊçÆÂ§±Ë¥•:', error);
             this.showMessage('Ê∏ÖÁêÜÊï∞ÊçÆÊó∂ÂèëÁîüÈîôËØØ', 'danger');
         }
    }

    /**
     * È™åËØÅÂåªÁîüÊï∞ÊçÆÊúâÊïàÊÄß
     */
    validateDoctorData(doctor) {
        if (!doctor) {
            return { valid: false, message: 'ÂåªÁîüÊï∞ÊçÆ‰∏∫Á©∫' };
        }
        
        if (!doctor.name || doctor.name.trim() === '') {
            return { valid: false, message: 'ÂåªÁîüÂßìÂêç‰∏çËÉΩ‰∏∫Á©∫' };
        }
        
        if (!doctor.title || doctor.title.trim() === '') {
            return { valid: false, message: 'ÂåªÁîüËÅåÁß∞‰∏çËÉΩ‰∏∫Á©∫' };
        }
        
        if (typeof doctor.titleCoefficient !== 'number' || doctor.titleCoefficient <= 0) {
            return { valid: false, message: 'ËÅåÁß∞Á≥ªÊï∞ÂøÖÈ°ª‰∏∫Ê≠£Êï∞' };
        }
        
        return { valid: true, message: 'Êï∞ÊçÆÊúâÊïà' };
    }

    /**
     * ËÆæÁΩÆÂΩìÂâçÊúà‰ªΩ
     */
    // Âú® MainPageController Á±ª‰∏≠Ê∑ªÂä†‰ª•‰∏ãÊñπÊ≥ï
    
    /**
     * Ëé∑ÂèñÊåáÂÆöÊúà‰ªΩÁöÑÂ§©Êï∞
     */
    getDaysInMonth(yearMonth) {
        if (!yearMonth) return 30; // ÈªòËÆ§30Â§©
        
        const [year, month] = yearMonth.split('-').map(Number);
        return new Date(year, month, 0).getDate();
    }
    
    /**
     * ËÆæÁΩÆÂΩìÂâçÊúà‰ªΩÔºà‰øÆÊîπÁâàÔºâ
     */
    setCurrentMonth() {
        const monthInput = document.getElementById('currentMonth');
        const monthValue = monthInput.value;
        
        if (!monthValue) {
            // Â¶ÇÊûúËæìÂÖ•Ê°Ü‰∏∫Á©∫Ôºå‰ΩøÁî®ÂΩìÂâçËÆæÁΩÆÁöÑÊúà‰ªΩÊàñÈªòËÆ§Êúà‰ªΩ
            if (this.currentMonth) {
                monthInput.value = this.currentMonth;
            } else {
                const currentDate = new Date();
                const defaultMonth = currentDate.toISOString().slice(0, 7);
                this.currentMonth = defaultMonth;
                monthInput.value = defaultMonth;
                localStorage.setItem('performance_system_current_month', defaultMonth);
            }
            this.showMessage('Â∑≤‰ΩøÁî®ÈªòËÆ§Êúà‰ªΩËÆæÁΩÆ', 'info');
        } else {
            this.currentMonth = monthValue;
            // ‰øùÂ≠òÂà∞localStorage
            localStorage.setItem('performance_system_current_month', monthValue);
        }
        
        const daysInMonth = this.getDaysInMonth(this.currentMonth);
        
        // Ëá™Âä®Êõ¥Êñ∞ÊâÄÊúâÂåªÁîüÁöÑÂá∫Âã§Â§©Êï∞‰∏∫ËØ•ÊúàÁöÑÂÆûÈôÖÂ§©Êï∞
        this.updateAllAttendanceDays(daysInMonth);
        
        this.updateDataSummary();
        this.showMessage(`Êúà‰ªΩËÆæÁΩÆÊàêÂäüÔºåËØ•ÊúàÂÖ±${daysInMonth}Â§©ÔºåÂ∑≤Ëá™Âä®ËÆæÁΩÆ‰∏∫ÈªòËÆ§Âá∫Âã§Â§©Êï∞`, 'success');
    }
    
    /**
     * Êõ¥Êñ∞ÊâÄÊúâÂåªÁîüÁöÑÂá∫Âã§Â§©Êï∞
     */
    updateAllAttendanceDays(days) {
        this.doctors.forEach(doctor => {
            if (!this.workData[doctor.id]) {
                this.workData[doctor.id] = {
                    doctorId: doctor.id,
                    attendanceDays: days,
                    dischargeCount: 0,
                    bedDays: 0,
                    rewardPenalty: 0
                };
            } else {
                // Âè™Âú®Âá∫Âã§Â§©Êï∞‰∏∫0ÊàñÊú™ËÆæÁΩÆÊó∂ÊâçËá™Âä®ËÆæÁΩÆ
                if (!this.workData[doctor.id].attendanceDays || this.workData[doctor.id].attendanceDays === 0) {
                    this.workData[doctor.id].attendanceDays = days;
                }
            }
            
            // ‰øùÂ≠òÂà∞Â≠òÂÇ®
            this.storageManager.saveCurrentWorkData(`workData_${doctor.id}`, this.workData[doctor.id]);
        });
        
        // ÈáçÊñ∞Ê∏≤ÊüìË°®Ê†º‰ª•ÊòæÁ§∫Êõ¥Êñ∞ÂêéÁöÑÊï∞ÊçÆ
        this.renderCombinedTable();
    }
    


    /**
     * Êõ¥Êñ∞ËÅåÁß∞Á≥ªÊï∞
     */
    updateTitleCoefficient(title) {
        const coefficientMap = {
            '‰ΩèÈô¢ÂåªÂ∏à': 1.0,
            '‰∏ªÊ≤ªÂåªÂ∏à': 1.2,
            'ÂâØ‰∏ª‰ªªÂåªÂ∏à': 1.5,
            '‰∏ª‰ªªÂåªÂ∏à': 1.8
        };
        
        const coefficient = coefficientMap[title] || 1.0;
        document.getElementById('titleCoefficient').value = coefficient;
    }

    /**
     * Ê∏≤ÊüìÁªºÂêàË°®Ê†º
     */
    renderCombinedTable() {
        const tbody = document.getElementById('combinedTableBody');
        tbody.innerHTML = '';

        // ËøáÊª§ÊéâÊó†ÊïàÁöÑÂåªÁîüÊï∞ÊçÆÔºàÂßìÂêç‰∏∫Á©∫„ÄÅnull„ÄÅundefinedÊàñÂè™ÂåÖÂê´Á©∫Ê†ºÔºâ
        const validDoctors = this.doctors.filter(doctor => {
            return doctor && doctor.name && typeof doctor.name === 'string' && doctor.name.trim() !== '';
        });

        console.log('ÂéüÂßãÂåªÁîüÊï∞Èáè:', this.doctors.length);
        console.log('ÊúâÊïàÂåªÁîüÊï∞Èáè:', validDoctors.length);
        console.log('ËøáÊª§ÂêéÁöÑÂåªÁîüÂàóË°®:', validDoctors);

        if (validDoctors.length === 0) {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td colspan="9" class="text-center text-muted py-4">
                    <i class="fas fa-user-plus fa-2x mb-2"></i><br>
                    ÊöÇÊó†ÂåªÁîü‰ø°ÊÅØÔºåËØ∑ÁÇπÂáª"Ê∑ªÂä†ÂåªÁîü"ÊåâÈíÆÊ∑ªÂä†
                </td>
            `;
            tbody.appendChild(row);
            return;
        }

        // Ëé∑ÂèñÂΩìÂâçÈÄâÊã©Êúà‰ªΩÁöÑÊÄªÂ§©Êï∞
        const currentMonthDays = this.currentMonth ? this.getDaysInMonth(this.currentMonth) : 30;

        validDoctors.forEach(doctor => {
            const workData = this.workData[doctor.id] || {};
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>
                    <strong>${doctor.name}</strong><br>
                    <small class="text-muted">${doctor.title}</small>
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="attendanceDays" data-doctor-id="${doctor.id}" 
                           value="${workData.attendanceDays !== undefined ? workData.attendanceDays : ''}" 
                           min="0" max="31" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'attendanceDays', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="dischargeCount" data-doctor-id="${doctor.id}" 
                           value="${workData.dischargeCount || ''}" 
                           min="0" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'dischargeCount', this.value)">
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm" 
                           data-field="bedDays" data-doctor-id="${doctor.id}" 
                           value="${workData.bedDays || ''}" 
                           min="0" placeholder=""
                           onchange="mainController.updateWorkData('${doctor.id}', 'bedDays', this.value)">
                </td>
                <td>
                    <div class="input-group input-group-sm" style="width: 150px;">
                        <select class="form-select" style="max-width: 50px;" 
                                data-field="rewardPenaltySign" data-doctor-id="${doctor.id}"
                                onchange="mainController.updateRewardPenaltySign('${doctor.id}', this.value)">
                            <option value="+" ${(workData.rewardPenalty || 0) >= 0 ? 'selected' : ''}>+</option>
                            <option value="-" ${(workData.rewardPenalty || 0) < 0 ? 'selected' : ''}>-</option>
                        </select>
                        <input type="number" class="form-control" 
                               data-field="rewardPenalty" data-doctor-id="${doctor.id}" 
                               value="${Math.abs(workData.rewardPenalty || 0)}" 
                               min="0" step="0.01" placeholder="" style="width: 100px;"
                               onchange="mainController.updateRewardPenalty('${doctor.id}', this.value)">
                    </div>
                </td>
                <td>
                    <div class="d-flex flex-column gap-1">
                        <button class="btn btn-outline-primary btn-sm" 
                                onclick="mainController.showDoctorModal('${doctor.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-success btn-sm" 
                                onclick="mainController.addNewDoctor()">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="btn btn-outline-danger btn-sm" 
                                onclick="mainController.deleteDoctor('${doctor.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            
            tbody.appendChild(row);
        });
    }



    /**
     * Êõ¥Êñ∞Â•ñÁΩöÈáëÈ¢ù
     */
    updateRewardPenalty(doctorId, value) {
        try {
            const numValue = parseFloat(value) || 0;
            
            if (!this.workData[doctorId]) {
                this.workData[doctorId] = {
                    doctorId: doctorId,
                    attendanceDays: 0,
                    dischargeCount: 0,
                    bedDays: 0,
                    medicalRevenue: 0,
                    rewardPenalty: 0
                };
            }
            
            // Ëé∑ÂèñÂΩìÂâçÁ¨¶Âè∑
            const signSelect = document.querySelector(`select[data-field="rewardPenaltySign"][data-doctor-id="${doctorId}"]`);
            const sign = signSelect ? signSelect.value : '+';
            
            // Ê†πÊçÆÁ¨¶Âè∑ËÆæÁΩÆÊ≠£Ë¥üÂÄº
            this.workData[doctorId].rewardPenalty = sign === '+' ? numValue : -numValue;
            
            // ‰øùÂ≠òÂà∞Â≠òÂÇ®
            this.storageManager.saveCurrentWorkData(`workData_${doctorId}`, this.workData[doctorId]);
            
            // Êõ¥Êñ∞Êï∞ÊçÆÊ±áÊÄª
            this.updateDataSummary();
            
        } catch (error) {
            console.error('Êõ¥Êñ∞Â•ñÁΩöÊï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('Êõ¥Êñ∞Â•ñÁΩöÊï∞ÊçÆÂ§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }

    /**
     * Êõ¥Êñ∞Â•ñÁΩöÁ¨¶Âè∑
     */
    updateRewardPenaltySign(doctorId, sign) {
        try {
            if (!this.workData[doctorId]) {
                this.workData[doctorId] = {
                    doctorId: doctorId,
                    attendanceDays: 0,
                    dischargeCount: 0,
                    bedDays: 0,
                    medicalRevenue: 0,
                    deduction: 0,
                    bonus: 0,
                    rewardPenalty: 0
                };
            }
            
            // Ëé∑ÂèñÂΩìÂâçÊï∞ÂÄº
            const currentValue = Math.abs(this.workData[doctorId].rewardPenalty || 0);
            
            // Ê†πÊçÆÁ¨¶Âè∑ËÆæÁΩÆÊ≠£Ë¥üÂÄº
            this.workData[doctorId].rewardPenalty = sign === '+' ? currentValue : -currentValue;
            
            // ‰øùÂ≠òÂà∞Â≠òÂÇ®
            this.storageManager.saveCurrentWorkData(`workData_${doctorId}`, this.workData[doctorId]);
            
            // Êõ¥Êñ∞Êï∞ÊçÆÊ±áÊÄª
            this.updateDataSummary();
            
        } catch (error) {
            console.error('Êõ¥Êñ∞Â•ñÁΩöÁ¨¶Âè∑Â§±Ë¥•:', error);
            this.showMessage('Êõ¥Êñ∞Â•ñÁΩöÁ¨¶Âè∑Â§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }





    /**
     * Êõ¥Êñ∞ÊÄªÂ•ñÈáë
     */
    updateTotalBonus(value) {
        this.totalBonus = parseFloat(value) || 0;
        // ‰øùÂ≠òÂà∞localStorage
        localStorage.setItem('performance_system_total_bonus', this.totalBonus.toString());
        this.updateDataSummary();
    }

    /**
     * Êõ¥Êñ∞Êï∞ÊçÆÊ±áÊÄªÊòæÁ§∫
     */
    updateDataSummary() {
        // ËøáÊª§ÊúâÊïàÂåªÁîüÂπ∂Êõ¥Êñ∞ÂåªÁîüÊï∞Èáè
        const validDoctors = this.doctors.filter(doctor => {
            return doctor && doctor.name && typeof doctor.name === 'string' && doctor.name.trim() !== '';
        });
        const doctorCountBadge = document.getElementById('doctorCountBadge');
        doctorCountBadge.textContent = validDoctors.length;
        doctorCountBadge.className = validDoctors.length > 0 ? 'badge bg-success ms-2' : 'badge bg-secondary ms-2';

        // Êõ¥Êñ∞Êúà‰ªΩÁä∂ÊÄÅ
        const monthStatusBadge = document.getElementById('monthStatusBadge');
        if (this.currentMonth) {
            monthStatusBadge.textContent = this.currentMonth;
            monthStatusBadge.className = 'badge bg-success ms-2';
        } else {
            monthStatusBadge.textContent = 'Êú™ËÆæÁΩÆ';
            monthStatusBadge.className = 'badge bg-secondary ms-2';
        }

        // Êõ¥Êñ∞Â•ñÈáëÁä∂ÊÄÅ
        const bonusStatusBadge = document.getElementById('bonusStatusBadge');
        if (this.totalBonus > 0) {
            bonusStatusBadge.textContent = `${this.totalBonus}ÂÖÉ`;
            bonusStatusBadge.className = 'badge bg-success ms-2';
        } else {
            bonusStatusBadge.textContent = 'Êú™ËÆæÁΩÆ';
            bonusStatusBadge.className = 'badge bg-secondary ms-2';
        }

        // Êõ¥Êñ∞Â∑•‰ΩúÊï∞ÊçÆÁä∂ÊÄÅ
        const workDataStatusBadge = document.getElementById('workDataStatusBadge');
        const hasWorkData = Object.keys(this.workData).length > 0;
        if (hasWorkData) {
            workDataStatusBadge.textContent = 'Â∑≤ÂΩïÂÖ•';
            workDataStatusBadge.className = 'badge bg-success ms-2';
        } else {
            workDataStatusBadge.textContent = 'Êú™ÂΩïÂÖ•';
            workDataStatusBadge.className = 'badge bg-secondary ms-2';
        }
    }

    /**
     * È¢ÑËßàÊï∞ÊçÆ
     */
    previewData() {
        // ÂÆûÁé∞Êï∞ÊçÆÈ¢ÑËßàÂäüËÉΩ
        console.log('È¢ÑËßàÊï∞ÊçÆÂäüËÉΩ');
    }

    /**
     * ËÆ°ÁÆóÁª©Êïà
     */
    calculatePerformance() {
        console.log('=== ÂºÄÂßãÁª©ÊïàËÆ°ÁÆó ===');
        console.log('ÂéüÂßãÂåªÁîüÊï∞ÊçÆ:', this.doctors);
        console.log('ÂéüÂßãÂ∑•‰ΩúÊï∞ÊçÆ:', this.workData);
        console.log('ÂΩìÂâçÊúà‰ªΩ:', this.currentMonth);
        console.log('ÊÄªÂ•ñÈáë:', this.totalBonus);
        
        try {
            // ËøáÊª§ÊúâÊïàÂåªÁîü
            const validDoctors = this.doctors.filter(doctor => {
                const isValid = doctor && doctor.name && typeof doctor.name === 'string' && doctor.name.trim() !== '';
                console.log(`ÂåªÁîü ${doctor?.name || 'Êú™Áü•'} ÊúâÊïàÊÄßÊ£ÄÊü•:`, isValid, doctor);
                return isValid;
            });
            
            console.log('ËøáÊª§ÂêéÁöÑÊúâÊïàÂåªÁîü:', validDoctors);
            console.log('ÊúâÊïàÂåªÁîüÊï∞Èáè:', validDoctors.length);
            
            // È™åËØÅÊï∞ÊçÆÂÆåÊï¥ÊÄß
            if (validDoctors.length === 0) {
                console.error('È™åËØÅÂ§±Ë¥•: Ê≤°ÊúâÊúâÊïàÂåªÁîü');
                this.showMessage('ËØ∑ÂÖàÊ∑ªÂä†ÂåªÁîü‰ø°ÊÅØ', 'warning');
                return;
            }

            if (!this.currentMonth) {
                console.error('È™åËØÅÂ§±Ë¥•: Ê≤°ÊúâËÆæÁΩÆÊúà‰ªΩ');
                this.showMessage('ËØ∑ÂÖàËÆæÁΩÆËÆ°ÁÆóÊúà‰ªΩ', 'warning');
                return;
            }

            if (this.totalBonus <= 0) {
                console.error('È™åËØÅÂ§±Ë¥•: ÊÄªÂ•ñÈáëÊó†Êïà', this.totalBonus);
                this.showMessage('ËØ∑ËÆæÁΩÆÊÄªÂ•ñÈáëÊï∞È¢ù', 'warning');
                return;
            }
            
            console.log('Êï∞ÊçÆÈ™åËØÅÈÄöËøáÔºåÂºÄÂßãÂáÜÂ§áËÆ°ÁÆóÊï∞ÊçÆ...');

            // ÂáÜÂ§áËÆ°ÁÆóÊï∞ÊçÆ - ÁªÑÂêàÂåªÁîü‰ø°ÊÅØÂíåÂ∑•‰ΩúÊï∞ÊçÆ
            const doctorsWithData = validDoctors.map(doctor => {
                console.log(`Â§ÑÁêÜÂåªÁîü ${doctor.name} (ID: ${doctor.id})`);
                
                const doctorData = {
                    ...doctor
                };
                console.log('ÂåªÁîüÊï∞ÊçÆ:', doctorData);

                // Ëé∑ÂèñÊàñÂàõÂª∫Â∑•‰ΩúÊï∞ÊçÆ
                const existingWorkData = this.workData[doctor.id];
                console.log(`ÂåªÁîü ${doctor.name} ÁöÑÁé∞ÊúâÂ∑•‰ΩúÊï∞ÊçÆ:`, existingWorkData);
                
                const workData = existingWorkData || {
                    doctorId: doctor.id,
                    attendanceDays: this.getDaysInCurrentMonth(), // ÈªòËÆ§‰∏∫ÂΩìÊúàÂ§©Êï∞
                    dischargeCount: 0,
                    bedDays: 0,
                    medicalRevenue: 0, // Ê∑ªÂä†ÂåªÁñó‰∏öÂä°ÊÄªÈ¢ù
                    rewardPenalty: 0  // ÈªòËÆ§Â•ñÁΩö‰∏∫0
                };
                
                console.log(`ÂåªÁîü ${doctor.name} ÁöÑÊúÄÁªàÂ∑•‰ΩúÊï∞ÊçÆ:`, workData);

                const combinedData = {
                    doctor: doctorData,
                    workData: workData
                };
                
                console.log(`ÂåªÁîü ${doctor.name} ÁöÑÁªÑÂêàÊï∞ÊçÆ:`, combinedData);
                return combinedData;
            });

            console.log('=== ÂáÜÂ§áËÆ°ÁÆóÁöÑÂÆåÊï¥Êï∞ÊçÆ ===');
            console.log('ÂåªÁîüÊï∞Èáè:', doctorsWithData.length);
            console.log('ËØ¶ÁªÜÊï∞ÊçÆ:', doctorsWithData);
            console.log('ÊÄªÂ•ñÈáë:', this.totalBonus);

            // ÊâßË°åËÆ°ÁÆó
            console.log('=== ÂºÄÂßãË∞ÉÁî®ËÆ°ÁÆóÂô® ===');
            console.log('‰º†ÈÄíÁªôËÆ°ÁÆóÂô®ÁöÑÂèÇÊï∞:');
            console.log('- doctorsWithData:', doctorsWithData);
            console.log('- totalBonus:', this.totalBonus);
            
            const result = this.calculator.calculateTeamPerformance(doctorsWithData, this.totalBonus);
            
            console.log('=== ËÆ°ÁÆóÂô®ËøîÂõûÁªìÊûú ===');
            console.log('ËÆ°ÁÆóÁªìÊûú:', result);
            console.log('individualResultsÊï∞Èáè:', result?.individualResults?.length || 0);
            console.log('teamStats:', result?.teamStats);
            console.log('groupStats:', result?.groupStats);
            
            // ‰øùÂ≠òËÆ°ÁÆóÁªìÊûúÂà∞sessionStorage‰æõresults.html‰ΩøÁî®
            try {
                // Ëß£ÊûêcurrentMonthÔºàÊ†ºÂºèÔºö"YYYY-MM"Ôºâ‰∏∫Âπ¥‰ªΩÂíåÊúà‰ªΩ
                const [yearFromMonth, monthFromMonth] = this.currentMonth.split('-');
                const dataToSave = {
                    year: parseInt(yearFromMonth),
                    month: parseInt(monthFromMonth),
                    totalBonus: this.totalBonus,
                    calculationTime: new Date().toISOString(),
                    results: {
                        individualResults: result.individualResults,
                        teamStats: result.teamStats,
                        groupStats: result.groupStats,
                        config: result.config
                    },
                    dataIntegrity: {
                        calculationSuccessful: true,
                        timestamp: new Date().toISOString()
                    }
                };
                
                console.log('=== ÂáÜÂ§á‰øùÂ≠òÂà∞sessionStorage ===');
                console.log('‰øùÂ≠òÁöÑÊï∞ÊçÆÁªìÊûÑ:', dataToSave);
                console.log('individualResultsÊï∞Èáè:', dataToSave.results.individualResults?.length || 0);
                
                const jsonString = JSON.stringify(dataToSave);
                console.log('JSONÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶:', jsonString.length);
                console.log('JSONÂ≠óÁ¨¶‰∏≤Ââç500Â≠óÁ¨¶:', jsonString.substring(0, 500));
                
                sessionStorage.setItem('performanceResults', jsonString);
                
                // È™åËØÅ‰øùÂ≠òÊòØÂê¶ÊàêÂäü
                const savedData = sessionStorage.getItem('performanceResults');
                console.log('È™åËØÅ‰øùÂ≠òÁªìÊûú - Êï∞ÊçÆÈïøÂ∫¶:', savedData?.length || 0);
                
                if (savedData) {
                    const parsedSavedData = JSON.parse(savedData);
                    console.log('È™åËØÅ‰øùÂ≠òÁªìÊûú - individualResultsÊï∞Èáè:', parsedSavedData.results?.individualResults?.length || 0);
                    console.log('Áª©ÊïàËÆ°ÁÆóÁªìÊûúÂ∑≤ÊàêÂäü‰øùÂ≠òÂà∞sessionStorage');
                } else {
                    throw new Error('‰øùÂ≠òÈ™åËØÅÂ§±Ë¥•ÔºösessionStorage‰∏≠Ê≤°ÊúâÊâæÂà∞Êï∞ÊçÆ');
                }
            } catch (error) {
                console.error('‰øùÂ≠òËÆ°ÁÆóÁªìÊûúÂà∞sessionStorageÂ§±Ë¥•:', error);
                console.error('ÈîôËØØËØ¶ÊÉÖ:', error.stack);
                this.showMessage('‰øùÂ≠òËÆ°ÁÆóÁªìÊûúÂ§±Ë¥•Ôºö' + error.message, 'danger');
                return;
            }
            
            // ÂêåÊó∂‰øùÂ≠òÂΩìÂâçÊï∞ÊçÆÂà∞localStorage‰Ωú‰∏∫Â§á‰ªΩ
            console.log('=== ‰øùÂ≠òÂ§á‰ªΩÊï∞ÊçÆÂà∞localStorage ===');
            try {
                this.storageManager.saveCurrentData({
                    doctors: this.doctors,
                    workData: this.workData,
                    currentMonth: this.currentMonth,
                    totalBonus: this.totalBonus
                });
                console.log('Â§á‰ªΩÊï∞ÊçÆ‰øùÂ≠òÊàêÂäü');
            } catch (backupError) {
                console.error('Â§á‰ªΩÊï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:', backupError);
            }
            
            console.log('=== ÂáÜÂ§áË∑≥ËΩ¨Âà∞ÁªìÊûúÈ°µÈù¢ ===');
            console.log('Âç≥Â∞ÜË∑≥ËΩ¨Âà∞ results.html');
            
            window.location.href = 'results.html';
            
        } catch (error) {
            console.error('=== ËÆ°ÁÆóÁª©ÊïàËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ ===');
            console.error('ÈîôËØØ‰ø°ÊÅØ:', error.message);
            console.error('ÈîôËØØÂ†ÜÊ†à:', error.stack);
            console.error('ÂΩìÂâçÁä∂ÊÄÅ:');
            console.error('- ÂåªÁîüÊï∞ÊçÆ:', this.doctors);
            console.error('- Â∑•‰ΩúÊï∞ÊçÆ:', this.workData);
            console.error('- ÂΩìÂâçÊúà‰ªΩ:', this.currentMonth);
            console.error('- ÊÄªÂ•ñÈáë:', this.totalBonus);
            this.showMessage('ËÆ°ÁÆóÂ§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }

    /**
     * ‰øùÂ≠òÂΩìÂâçÊï∞ÊçÆ
     */
    async saveCurrentData() {
        try {
            // ‰øùÂ≠òÂåªÁîü‰ø°ÊÅØ
            await this.storageManager.saveDoctors(this.doctors);
            
            // ‰øùÂ≠òÂ∑•‰ΩúÊï∞ÊçÆ
            for (const [doctorId, data] of Object.entries(this.workData)) {
                await this.storageManager.saveCurrentWorkData(`workData_${doctorId}`, data);
            }
            
            // ‰øùÂ≠òÂà∞ÂéÜÂè≤ËÆ∞ÂΩï
            this.saveToHistory();
            
            this.showMessage('Êï∞ÊçÆ‰øùÂ≠òÊàêÂäü', 'success');
            
        } catch (error) {
            console.error('‰øùÂ≠òÊï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('‰øùÂ≠òÂ§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }

    /**
     * ‰øùÂ≠òÊï∞ÊçÆÂà∞ÂéÜÂè≤ËÆ∞ÂΩï
     */
    saveToHistory() {
        try {
            const historyData = {
                id: Date.now().toString(), // ‰ΩøÁî®Êó∂Èó¥Êà≥‰Ωú‰∏∫ÂîØ‰∏ÄID
                saveTime: new Date().toISOString(),
                displayTime: new Date().toLocaleString('zh-CN'),
                doctors: JSON.parse(JSON.stringify(this.doctors)), // Ê∑±Êã∑Ë¥ù
                workData: JSON.parse(JSON.stringify(this.workData)), // Ê∑±Êã∑Ë¥ù
                currentMonth: this.currentMonth,
                totalBonus: this.totalBonus,
                doctorCount: this.doctors.length,
                hasWorkData: Object.keys(this.workData).length > 0
            };

            // Ëé∑ÂèñÁé∞ÊúâÂéÜÂè≤ËÆ∞ÂΩï
            const existingHistory = JSON.parse(localStorage.getItem('performance_system_history') || '[]');
            
            // Ê∑ªÂä†Êñ∞ËÆ∞ÂΩïÂà∞ÂºÄÂ§¥
            existingHistory.unshift(historyData);
            
            // ÈôêÂà∂ÂéÜÂè≤ËÆ∞ÂΩïÊï∞ÈáèÔºà‰øùÁïôÊúÄËøë20Êù°Ôºâ
            if (existingHistory.length > 20) {
                existingHistory.splice(20);
            }
            
            // ‰øùÂ≠òÂà∞localStorage
            localStorage.setItem('performance_system_history', JSON.stringify(existingHistory));
            
            console.log('ÂéÜÂè≤Êï∞ÊçÆ‰øùÂ≠òÊàêÂäü:', historyData);
            
        } catch (error) {
            console.error('‰øùÂ≠òÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * Ëé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®
     */
    getHistoryList() {
        try {
            return JSON.parse(localStorage.getItem('performance_system_history') || '[]');
        } catch (error) {
            console.error('Ëé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•:', error);
            return [];
        }
    }

    /**
     * ‰ªéÂéÜÂè≤ËÆ∞ÂΩïÂä†ËΩΩÊï∞ÊçÆ
     */
    loadFromHistory(historyId) {
        try {
            const historyList = this.getHistoryList();
            const historyData = historyList.find(item => item.id === historyId);
            
            if (!historyData) {
                this.showMessage('Êú™ÊâæÂà∞ÊåáÂÆöÁöÑÂéÜÂè≤ËÆ∞ÂΩï', 'warning');
                return false;
            }
            
            // ÊÅ¢Â§çÊï∞ÊçÆ
            this.doctors = historyData.doctors || [];
            this.workData = historyData.workData || {};
            this.currentMonth = historyData.currentMonth || '';
            this.totalBonus = historyData.totalBonus || 0;
            
            // Êõ¥Êñ∞ÁïåÈù¢
            this.renderCombinedTable();
            this.updateDataSummary();
            
            // Êõ¥Êñ∞Êúà‰ªΩÈÄâÊã©Âô®
            const monthSelect = document.getElementById('monthSelect');
            if (monthSelect && this.currentMonth) {
                monthSelect.value = this.currentMonth;
            }
            
            // Êõ¥Êñ∞ÊÄªÂ•ñÈáëËæìÂÖ•Ê°Ü
            const bonusInput = document.getElementById('totalBonusInput');
            if (bonusInput) {
                bonusInput.value = this.totalBonus;
            }
            
            this.showMessage(`ÂéÜÂè≤Êï∞ÊçÆÂä†ËΩΩÊàêÂäü (${historyData.displayTime})`, 'success');
            return true;
            
        } catch (error) {
            console.error('Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•Ôºö' + error.message, 'danger');
            return false;
        }
    }

    /**
     * ÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩïÈÄâÊã©Ê®°ÊÄÅÊ°Ü
     */
    showHistoryModal() {
        const historyList = this.getHistoryList();
        
        if (historyList.length === 0) {
            this.showMessage('ÊöÇÊó†ÂéÜÂè≤ËÆ∞ÂΩï', 'info');
            return;
        }
        
        // ÂàõÂª∫Ê®°ÊÄÅÊ°ÜHTML
        const modalHtml = `
            <div class="modal fade" id="historyModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white">
                            <h5 class="modal-title">
                                <i class="fas fa-history me-2"></i>
                                ÈÄâÊã©ÂéÜÂè≤ËÆ∞ÂΩï
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>‰øùÂ≠òÊó∂Èó¥</th>
                                            <th>Êúà‰ªΩ</th>
                                            <th>ÂåªÁîüÊï∞Èáè</th>
                                            <th>ÊÄªÂ•ñÈáë</th>
                                            <th>Â∑•‰ΩúÊï∞ÊçÆ</th>
                                            <th>Êìç‰Ωú</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTableBody">
                                        ${this.generateHistoryTableRows(historyList)}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ÂèñÊ∂à</button>
                            <button type="button" class="btn btn-danger" id="clearAllHistoryBtn">
                                <i class="fas fa-trash me-1"></i>
                                Ê∏ÖÁ©∫ÊâÄÊúâÂéÜÂè≤
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // ÁßªÈô§Â∑≤Â≠òÂú®ÁöÑÊ®°ÊÄÅÊ°Ü
        const existingModal = document.getElementById('historyModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        // Ê∑ªÂä†Êñ∞Ê®°ÊÄÅÊ°ÜÂà∞È°µÈù¢
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
        // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.setupHistoryModalEventListeners();
        
        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        const modal = new bootstrap.Modal(document.getElementById('historyModal'));
        modal.show();
        
        // Ê®°ÊÄÅÊ°ÜÂÖ≥Èó≠Êó∂Ê∏ÖÁêÜDOM
        document.getElementById('historyModal').addEventListener('hidden.bs.modal', () => {
            document.getElementById('historyModal').remove();
        });
    }
    
    /**
     * ÁîüÊàêÂéÜÂè≤ËÆ∞ÂΩïË°®Ê†ºË°å
     */
    generateHistoryTableRows(historyList) {
        return historyList.map(history => {
            const workDataStatus = history.hasWorkData ? 
                '<span class="badge bg-success">Â∑≤ÂΩïÂÖ•</span>' : 
                '<span class="badge bg-secondary">Êú™ÂΩïÂÖ•</span>';
            
            return `
                <tr>
                    <td>${history.displayTime}</td>
                    <td>${history.currentMonth || 'Êú™ËÆæÁΩÆ'}</td>
                    <td>${history.doctorCount}</td>
                    <td>${history.totalBonus ? history.totalBonus + 'ÂÖÉ' : 'Êú™ËÆæÁΩÆ'}</td>
                    <td>${workDataStatus}</td>
                    <td>
                        <button class="btn btn-primary btn-sm load-history-btn" data-history-id="${history.id}">
                            <i class="fas fa-download me-1"></i>
                            Âä†ËΩΩ
                        </button>
                        <button class="btn btn-danger btn-sm ms-1 delete-history-btn" data-history-id="${history.id}">
                            <i class="fas fa-trash me-1"></i>
                            Âà†Èô§
                        </button>
                    </td>
                </tr>
            `;
        }).join('');
    }
    
    /**
     * ËÆæÁΩÆÂéÜÂè≤ËÆ∞ÂΩïÊ®°ÊÄÅÊ°Ü‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    setupHistoryModalEventListeners() {
        // Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÊåâÈíÆ
        document.addEventListener('click', (e) => {
            if (e.target.closest('.load-history-btn')) {
                const historyId = e.target.closest('.load-history-btn').dataset.historyId;
                this.loadFromHistory(historyId);
                
                // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
                const modal = bootstrap.Modal.getInstance(document.getElementById('historyModal'));
                if (modal) {
                    modal.hide();
                }
            }
        });
        
        // Âà†Èô§Âçï‰∏™ÂéÜÂè≤ËÆ∞ÂΩïÊåâÈíÆ
        document.addEventListener('click', (e) => {
            if (e.target.closest('.delete-history-btn')) {
                const historyId = e.target.closest('.delete-history-btn').dataset.historyId;
                this.deleteHistoryRecord(historyId);
            }
        });
        
        // Ê∏ÖÁ©∫ÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩïÊåâÈíÆ
        const clearAllBtn = document.getElementById('clearAllHistoryBtn');
        if (clearAllBtn) {
            clearAllBtn.addEventListener('click', () => {
                this.clearAllHistory();
            });
        }
    }
    
    /**
     * Âà†Èô§Âçï‰∏™ÂéÜÂè≤ËÆ∞ÂΩï
     */
    deleteHistoryRecord(historyId) {
        if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊù°ÂéÜÂè≤ËÆ∞ÂΩïÂêóÔºü')) {
            return;
        }
        
        try {
            const historyList = this.getHistoryList();
            const updatedList = historyList.filter(item => item.id !== historyId);
            localStorage.setItem('performance_system_history', JSON.stringify(updatedList));
            
            // Âà∑Êñ∞Ê®°ÊÄÅÊ°ÜÂÜÖÂÆπ
            this.refreshHistoryModal();
            this.showMessage('ÂéÜÂè≤ËÆ∞ÂΩïÂà†Èô§ÊàêÂäü', 'success');
            
        } catch (error) {
            console.error('Âà†Èô§ÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•:', error);
            this.showMessage('Âà†Èô§Â§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }
    
    /**
     * Ê∏ÖÁ©∫ÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩï
     */
    clearAllHistory() {
        if (!confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩïÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºÅ')) {
            return;
        }
        
        try {
            localStorage.removeItem('performance_system_history');
            
            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            const modal = bootstrap.Modal.getInstance(document.getElementById('historyModal'));
            if (modal) {
                modal.hide();
            }
            
            this.showMessage('ÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩïÂ∑≤Ê∏ÖÁ©∫', 'success');
            
        } catch (error) {
            console.error('Ê∏ÖÁ©∫ÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•:', error);
            this.showMessage('Ê∏ÖÁ©∫Â§±Ë¥•Ôºö' + error.message, 'danger');
        }
    }
    
    /**
     * Âà∑Êñ∞ÂéÜÂè≤ËÆ∞ÂΩïÊ®°ÊÄÅÊ°ÜÂÜÖÂÆπ
     */
    refreshHistoryModal() {
        const historyList = this.getHistoryList();
        const tbody = document.getElementById('historyTableBody');
        
        if (tbody) {
            if (historyList.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">ÊöÇÊó†ÂéÜÂè≤ËÆ∞ÂΩï</td></tr>';
            } else {
                tbody.innerHTML = this.generateHistoryTableRows(historyList);
            }
        }
    }

    /**
     * ÊòæÁ§∫Ê∂àÊÅØ
     */
    showMessage(message, type = 'info') {
        const messageArea = document.getElementById('messageArea');
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        messageArea.appendChild(alertDiv);
        
        // Ëá™Âä®ÁßªÈô§Ê∂àÊÅØ
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÊéßÂà∂Âô®
document.addEventListener('DOMContentLoaded', () => {
    window.mainController = new MainPageController();
});